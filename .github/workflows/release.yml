name: Release

on:
  push:
    tags:
      - 'v*'

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: extract_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Generate release notes
      id: release_notes
      run: |
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "# RedmineCLI v${{ steps.extract_version.outputs.version }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## 🚀 Features" >> $GITHUB_OUTPUT
        echo "- GitHub CLI-like experience for Redmine ticket management" >> $GITHUB_OUTPUT
        echo "- Native AOT compiled binaries for fast startup (< 100ms)" >> $GITHUB_OUTPUT
        echo "- Cross-platform support (Windows, macOS, Linux)" >> $GITHUB_OUTPUT
        echo "- Interactive and non-interactive command modes" >> $GITHUB_OUTPUT
        echo "- Web browser integration with --web option" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## 📥 Installation" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### As dotnet tool:" >> $GITHUB_OUTPUT
        echo "\`\`\`bash" >> $GITHUB_OUTPUT
        echo "dotnet tool install -g RedmineCLI --version ${{ steps.extract_version.outputs.version }}" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### As standalone binary:" >> $GITHUB_OUTPUT
        echo "Download the appropriate binary for your platform from the assets below." >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## 🛠️ Usage" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "\`\`\`bash" >> $GITHUB_OUTPUT
        echo "# Setup authentication" >> $GITHUB_OUTPUT
        echo "redmine auth login" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "# List issues" >> $GITHUB_OUTPUT
        echo "redmine issue list" >> $GITHUB_OUTPUT
        echo "redmine issue list -a @me" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "# Create and manage issues" >> $GITHUB_OUTPUT
        echo "redmine issue create" >> $GITHUB_OUTPUT
        echo "redmine issue view 123" >> $GITHUB_OUTPUT
        echo "redmine issue edit 123" >> $GITHUB_OUTPUT
        echo "redmine issue comment 123" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: RedmineCLI ${{ steps.extract_version.outputs.version }}
        body: ${{ steps.release_notes.outputs.release_notes }}
        draft: false
        prerelease: ${{ contains(steps.extract_version.outputs.version, '-') }}

  build-and-release:
    name: Build and Release - ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    needs: create-release
    strategy:
      matrix:
        config:
          - name: "Windows x64"
            os: windows-latest
            rid: win-x64
            output: RedmineCLI.exe
            asset_name: redmine-cli-windows-x64.exe
          - name: "macOS x64"
            os: macos-latest
            rid: osx-x64
            output: RedmineCLI
            asset_name: redmine-cli-macos-x64
          - name: "macOS ARM64"
            os: macos-latest
            rid: osx-arm64
            output: RedmineCLI
            asset_name: redmine-cli-macos-arm64
          - name: "Linux x64"
            os: ubuntu-latest
            rid: linux-x64
            output: RedmineCLI
            asset_name: redmine-cli-linux-x64
          - name: "Linux ARM64"
            os: ubuntu-latest
            rid: linux-arm64
            output: RedmineCLI
            asset_name: redmine-cli-linux-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install cross-compilation tools for ARM64
      if: matrix.config.rid == 'linux-arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu

    - name: Restore dependencies
      run: dotnet restore

    - name: Run tests
      run: dotnet test --configuration Release

    - name: Publish Native AOT
      run: |
        if [[ "${{ matrix.config.rid }}" == "linux-arm64" ]]; then
          # Disable symbol stripping for cross-compilation
          dotnet publish RedmineCLI/RedmineCLI.csproj -c Release -r ${{ matrix.config.rid }} -p:PublishAot=true -p:StripSymbols=false --self-contained -o publish/${{ matrix.config.rid }}
        else
          dotnet publish RedmineCLI/RedmineCLI.csproj -c Release -r ${{ matrix.config.rid }} -p:PublishAot=true -p:StripSymbols=true --self-contained -o publish/${{ matrix.config.rid }}
        fi

    - name: Compress binary (Unix)
      if: runner.os != 'Windows'
      run: |
        cd publish/${{ matrix.config.rid }}
        tar -czf ../../${{ matrix.config.asset_name }}.tar.gz ${{ matrix.config.output }}
        cd ../..

    - name: Compress binary (Windows)
      if: runner.os == 'Windows'
      run: |
        cd publish/${{ matrix.config.rid }}
        Compress-Archive -Path ${{ matrix.config.output }} -DestinationPath ../../${{ matrix.config.asset_name }}.zip
        cd ../..

    - name: Upload Release Asset (Unix)
      if: runner.os != 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.release_upload_url }}
        asset_path: ./${{ matrix.config.asset_name }}.tar.gz
        asset_name: ${{ matrix.config.asset_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.release_upload_url }}
        asset_path: ./${{ matrix.config.asset_name }}.zip
        asset_name: ${{ matrix.config.asset_name }}.zip
        asset_content_type: application/zip

  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: create-release
    if: "!contains(github.ref_name, '-')" # Only for stable releases
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Run tests
      run: dotnet test --configuration Release

    - name: Pack as dotnet tool
      run: dotnet pack RedmineCLI/RedmineCLI.csproj --configuration Release --no-restore -o packages/

    - name: Publish to NuGet
      run: dotnet nuget push packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [create-release, build-and-release]
    if: "!contains(github.ref_name, '-')" # Only for stable releases
    
    steps:
    - name: Extract version from tag
      id: extract_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update Homebrew formula
      uses: dawidd6/action-homebrew-bump-formula@v3
      with:
        token: ${{ secrets.HOMEBREW_TOKEN }}
        formula: redmine-cli
        tag: ${{ github.ref_name }}
        revision: ${{ github.sha }}
        force: false # Don't force push