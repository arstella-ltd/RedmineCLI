name: Release

on:
  push:
    tags:
      - 'v*'

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: extract_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Generate release notes
      id: release_notes
      run: |
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "# RedmineCLI v${{ steps.extract_version.outputs.version }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## 🚀 Features" >> $GITHUB_OUTPUT
        echo "- GitHub CLI-like experience for Redmine ticket management" >> $GITHUB_OUTPUT
        echo "- Native AOT compiled binaries for fast startup (< 100ms)" >> $GITHUB_OUTPUT
        echo "- Cross-platform support (Windows, macOS, Linux)" >> $GITHUB_OUTPUT
        echo "- Interactive and non-interactive command modes" >> $GITHUB_OUTPUT
        echo "- Web browser integration with --web option" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## 📥 Installation" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "Download the appropriate binary for your platform from the assets below." >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## 🛠️ Usage" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "\`\`\`bash" >> $GITHUB_OUTPUT
        echo "# Setup authentication" >> $GITHUB_OUTPUT
        echo "redmine auth login" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "# List issues" >> $GITHUB_OUTPUT
        echo "redmine issue list" >> $GITHUB_OUTPUT
        echo "redmine issue list -a @me" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "# Create and manage issues" >> $GITHUB_OUTPUT
        echo "redmine issue create" >> $GITHUB_OUTPUT
        echo "redmine issue view 123" >> $GITHUB_OUTPUT
        echo "redmine issue edit 123" >> $GITHUB_OUTPUT
        echo "redmine issue comment 123" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        name: RedmineCLI ${{ steps.extract_version.outputs.version }}
        body: ${{ steps.release_notes.outputs.release_notes }}
        draft: false
        prerelease: ${{ contains(steps.extract_version.outputs.version, '-') }}
        generate_release_notes: false

  build-and-release:
    name: Build and Release - ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    needs: create-release
    permissions:
      contents: write
    strategy:
      matrix:
        config:
          - name: "Windows x64"
            os: windows-latest
            rid: win-x64
            output: redmine.exe
            asset_name: redmine-cli-win-x64
          - name: "macOS x64"
            os: macos-latest
            rid: osx-x64
            output: redmine
            asset_name: redmine-cli-osx-x64
          - name: "macOS ARM64"
            os: macos-latest
            rid: osx-arm64
            output: redmine
            asset_name: redmine-cli-osx-arm64
          - name: "Linux x64"
            os: ubuntu-latest
            rid: linux-x64
            output: redmine
            asset_name: redmine-cli-linux-x64
          - name: "Linux ARM64"
            os: ubuntu-24.04-arm
            rid: linux-arm64
            output: redmine
            asset_name: redmine-cli-linux-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}


    - name: Restore dependencies
      run: dotnet restore

    - name: Run tests
      run: dotnet test --configuration Release

    - name: Extract version from tag (Windows)
      if: runner.os == 'Windows'
      id: extract_version_windows
      shell: pwsh
      run: |
        $VERSION = "${{ github.ref_name }}".TrimStart('v')
        echo "version=$VERSION" >> $env:GITHUB_OUTPUT

    - name: Extract version from tag (Unix)
      if: runner.os != 'Windows'
      id: extract_version_unix
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Publish Native AOT
      run: |
        dotnet publish RedmineCLI/RedmineCLI.csproj -c Release -r ${{ matrix.config.rid }} -p:PublishAot=true -p:StripSymbols=true -p:Version=${{ steps.extract_version_windows.outputs.version || steps.extract_version_unix.outputs.version }} -p:SourceRevisionId= --self-contained -o publish/${{ matrix.config.rid }}

    - name: Compress binary to zip (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        cd publish/${{ matrix.config.rid }}
        Compress-Archive -Path ${{ matrix.config.output }} -DestinationPath ../../${{ matrix.config.asset_name }}.zip
        cd ../..

    - name: Compress binary to zip (Unix)
      if: runner.os != 'Windows'
      run: |
        cd publish/${{ matrix.config.rid }}
        zip -j ../../${{ matrix.config.asset_name }}.zip ${{ matrix.config.output }}
        cd ../..

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ matrix.config.asset_name }}.zip

  generate-checksums:
    name: Generate Checksums
    runs-on: ubuntu-latest
    needs: [create-release, build-and-release]
    permissions:
      contents: write
    
    steps:
    - name: Download release assets
      uses: robinraju/release-downloader@v1.11
      with:
        tag: ${{ github.ref_name }}
        fileName: "*.zip"
        out-file-path: "downloads"
    
    - name: Generate checksums
      run: |
        cd downloads
        sha256sum *.zip > ../checksums.txt
        cd ..
        cat checksums.txt
    
    - name: Upload checksums
      uses: softprops/action-gh-release@v2
      with:
        files: checksums.txt


  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [create-release, build-and-release, generate-checksums]
    if: ${{ !contains(github.ref_name, '-') }} # Only for stable releases
    
    steps:
    - name: Extract version from tag
      id: extract_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update Homebrew formula
      uses: dawidd6/action-homebrew-bump-formula@v3
      with:
        token: ${{ secrets.HOMEBREW_TOKEN }}
        formula: redmine-cli
        tag: ${{ github.ref_name }}
        revision: ${{ github.sha }}
        force: false # Don't force push